/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package musicbox;

import LinkedListVariations.DoublyLinkedList;
import LinkedListVariations.DoublySingleNode;
import LinkedListVariations.DoublyNodeIterator;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ItemEvent;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;

/**
 * MainPlayer --- frame to play music
 *
 * @author Ashwika Katiyar, Aarushi Kahlon
 */
public class MainPlayer extends javax.swing.JFrame {

    private String type;
    private PlayList userList;
    private PlayListManager allLists;
    private String playlistName;
    private Player songPlayer;
    private DefaultListModel songLib;

    /**
     * Creates new form MainPlayer
     *
     * @param truckChoice A String containing the type of Food Truck chosen
     * @param name A String containing the name of the desired playlist
     * @param allPlayLists A PlayListManager containing all the playlists
     * created
     * @param mod A DefaultListModel containing the song library
     */
    public MainPlayer(String truckChoice, String name, PlayListManager allPlayLists, DefaultListModel mod) {
        allLists = allPlayLists;
        userList = allLists.findPlaylist(name);
        songLib = mod;
        try {
            this.songPlayer = new Player(userList);
        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException ex) {
            Logger.getLogger(MainPlayer.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        jScrollPane1.setOpaque(false);
        jScrollPane1.getViewport().setOpaque(false);
        type = truckChoice;
        playlistName = name;
        listName.setText(playlistName);
        listName.setFont(new Font("Stencil", Font.BOLD, 25));
        DefaultListModel modPL = new DefaultListModel();
        Object[] strPL = userList.toArray();
        for (Object s : strPL) {
            modPL.addElement(s);
        }
        songList.setModel(modPL);
        ImageIcon bg = null;
        switch (type) {
            case "Burgers and Sliders":
                bg = new ImageIcon("BurgerPlay.png");
                break;
            case "Desserts":
                bg = new ImageIcon("DessertPlay.png");
                break;
            case "Pizza":
                bg = new ImageIcon("PizzaPlay.png");
                break;
            case "Breakfast and Brunch":
                bg = new ImageIcon("BreakfastPlay.png");
                break;
            case "Crepes":
                bg = new ImageIcon("CrepePlay.png");
                break;
            case "Tacos and Burritos":
                bg = new ImageIcon("Taco_BurritoPlay.png");
                break;
        }
        background.setIcon(bg);
        this.setSize(bg.getIconWidth(), bg.getIconHeight());
    }

    /**
     * Creates new form MainPlayer
     */
    public MainPlayer() {
        userList = new PlayList();
        try {
            this.songPlayer = new Player(userList);
        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException ex) {
            Logger.getLogger(MainPlayer.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        jScrollPane1.setOpaque(false);
        jScrollPane1.getViewport().setOpaque(false);
        ImageIcon bg = new ImageIcon("main_bg.png");
        background.setIcon(bg);
        this.setSize(bg.getIconWidth(), bg.getIconHeight());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        forward = new javax.swing.JButton();
        home = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        songList = new javax.swing.JList<>();
        play = new javax.swing.JButton();
        listName = new javax.swing.JLabel();
        shuffle = new javax.swing.JButton();
        pause = new javax.swing.JButton();
        repeat = new javax.swing.JButton();
        editPlaylist = new javax.swing.JButton();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        forward.setText("Skip");
        forward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardActionPerformed(evt);
            }
        });
        getContentPane().add(forward);
        forward.setBounds(330, 470, 72, 23);

        home.setText("Home");
        home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeActionPerformed(evt);
            }
        });
        getContentPane().add(home);
        home.setBounds(92, 70, 70, 23);

        jScrollPane1.setBorder(null);
        jScrollPane1.setOpaque(false);

        songList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        songList.setOpaque(false);
        jScrollPane1.setViewportView(songList);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(90, 150, 360, 290);

        play.setText("Play");
        play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playActionPerformed(evt);
            }
        });
        getContentPane().add(play);
        play.setBounds(150, 470, 72, 23);

        listName.setBackground(new java.awt.Color(255, 255, 255));
        listName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        listName.setText("Playlist Name");
        listName.setOpaque(true);
        getContentPane().add(listName);
        listName.setBounds(90, 110, 360, 30);

        shuffle.setText("Shuffle");
        shuffle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shuffleActionPerformed(evt);
            }
        });
        getContentPane().add(shuffle);
        shuffle.setBounds(420, 470, 80, 23);

        pause.setText("Pause");
        pause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseActionPerformed(evt);
            }
        });
        getContentPane().add(pause);
        pause.setBounds(240, 470, 72, 23);

        repeat.setText("Repeat");
        repeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repeatActionPerformed(evt);
            }
        });
        getContentPane().add(repeat);
        repeat.setBounds(60, 470, 72, 23);

        editPlaylist.setText("Edit");
        editPlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPlaylistActionPerformed(evt);
            }
        });
        getContentPane().add(editPlaylist);
        editPlaylist.setBounds(370, 70, 72, 23);

        background.setText("jLabel2");
        getContentPane().add(background);
        background.setBounds(0, 0, 540, 540);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * homeActionPerformed --- opens a frame to go back to the frame that
     * contains all the user playlists
     *
     * @author Ashwika Katiyar
     * @param evt
     */
    private void homeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeActionPerformed
        Home homeFrame = new Home(type, allLists);
        homeFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_homeActionPerformed

    /**
     * playActionPerformed --- Plays the selected song in the user playlist
     *
     * @author Aarushi Kahlon
     * @param evt
     */
    private void playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playActionPerformed
        try {
            songPlayer.playSelectedSong(songList.getSelectedValue());
        } catch (LineUnavailableException | IOException | UnsupportedAudioFileException ex) {
            Logger.getLogger(MainPlayer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_playActionPerformed

    /**
     * pauseActionPerformed --- pauses the current song playing
     *
     * @author Aarushi Kahlon
     * @param evt
     */
    private void pauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseActionPerformed
        songPlayer.pause();
    }//GEN-LAST:event_pauseActionPerformed

    /**
     * forwardActionPerformed --- skips the current song and goes to the next
     * one in the user playlist
     *
     * @author Ashwika Katiyar
     * @param evt
     */
    private void forwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardActionPerformed
        try {
            songPlayer.stop();
            songList.setSelectedIndex(songList.getSelectedIndex() + 1);
            songPlayer.play();
        } catch (UnsupportedAudioFileException | LineUnavailableException | IOException ex) {
            Logger.getLogger(MainPlayer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_forwardActionPerformed

    /**
     * shuffleActionPerformed --- shuffles the user playlist
     *
     * @author Aarushi Kahlon
     * @param evt
     */
    private void shuffleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shuffleActionPerformed
        userList.shufflePlaylist();
        DefaultListModel model = new DefaultListModel();
        for (Object a : userList.toArray()) {
            model.addElement(a);
            songList.setModel(model);
        }
        songList.setModel(model);
    }//GEN-LAST:event_shuffleActionPerformed

    /**
     * repeatActionPerformed --- restarts the playlist from the beginning
     *
     * @author Ashwika Katiyar
     * @param evt
     */
    private void repeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repeatActionPerformed
        try {
            songPlayer.stop();
            songList.setSelectedIndex(0);
            songPlayer.playSelectedSong(songList.getSelectedValue());
        } catch (LineUnavailableException ex) {
            Logger.getLogger(MainPlayer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainPlayer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(MainPlayer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_repeatActionPerformed

    /**
     * editPlaylistActionPerformed --- send current playlist to be edited
     *
     * @author Ashwika Katiyar
     * @param evt
     */
    private void editPlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPlaylistActionPerformed
        try {
            String pl = songList.getSelectedValue();
            SinglePlayListEdit editList = new SinglePlayListEdit(type, allLists, playlistName, songLib);
            editList.setVisible(true);
            this.dispose();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainPlayer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_editPlaylistActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JButton editPlaylist;
    private javax.swing.JButton forward;
    private javax.swing.JButton home;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel listName;
    private javax.swing.JButton pause;
    private javax.swing.JButton play;
    private javax.swing.JButton repeat;
    private javax.swing.JButton shuffle;
    private javax.swing.JList<String> songList;
    // End of variables declaration//GEN-END:variables
}
